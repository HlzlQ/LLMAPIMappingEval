
MXNet does not have a direct equivalent of TensorFlow's `tf.einsum` API. However, you can achieve similar functionality using MXNet's `ndarray` module and the `tensordot` function. Here's an example:
```python
import mxnet as mx

# Create two random 3D tensors
a = mx.nd.random.normal(shape=(2, 3, 4))
b = mx.nd.random.normal(shape=(2, 3, 5))

# Compute the einsum product using tensordot
c = mx.nd.tensordot(a, b, axes=[[1], [0]])
```
In this example, `a` and `b` are two random 3D tensors with shapes `(2, 3, 4)` and `(2, 3, 5)`, respectively. The `tensordot` function is used to compute the einsum product of `a` and `b`, with the axes specified as `[[1], [0]]`. This will perform a contraction along the second axis of `a` and the first axis of `b`, resulting in a tensor with shape `(2, 3, 4, 5)`.

Note that MXNet's `tensordot` function is more flexible than TensorFlow's `tf.einsum` API, as it allows for more complex contractions and supports broadcasting. However, the basic functionality of computing einsum products is similar between the two libraries.