
MXNet does not have an exact equivalent of `tensorflow.compat.v1.nn.conv3d_transpose`. However, you can use the following APIs to achieve a similar result:

* `mxnet.ndarray.Convolution`: This API performs a 3D convolution operation on a 5D input tensor. The first three dimensions of the input tensor are treated as the spatial dimensions (height, width, and depth), and the last two dimensions are treated as the channel dimensions.
* `mxnet.ndarray.TransposeConvolution`: This API performs a transposed 3D convolution operation on a 5D input tensor. The first three dimensions of the input tensor are treated as the spatial dimensions (height, width, and depth), and the last two dimensions are treated as the channel dimensions.

Here's an example code snippet that demonstrates how to use these APIs:
```python
import mxnet as mx

# Create a 5D input tensor with shape (batch_size, height, width, depth, channels)
input_data = mx.nd.random.normal(shape=(1, 32, 32, 32, 3))

# Perform a 3D convolution operation on the input tensor
conv_layer = mx.gluon.nn.Conv3d(channels=64, kernel_size=3)
output = conv_layer(input_data)

# Perform a transposed 3D convolution operation on the output of the previous layer
transpose_conv_layer = mx.gluon.nn.TransposeConv3d(channels=64, kernel_size=3)
output = transpose_conv_layer(output)
```
Note that the `mxnet.ndarray.Convolution` and `mxnet.ndarray.TransposeConvolution` APIs are more flexible than the TensorFlow API, as they allow you to specify the number of channels in the input and output tensors, as well as the kernel size and stride.