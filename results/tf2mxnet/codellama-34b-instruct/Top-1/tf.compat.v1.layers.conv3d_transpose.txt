
MXNet does not have an exact equivalent of `tensorflow.compat.v1.layers.conv3d_transpose`. However, you can use the following APIs to achieve a similar result:

* `mxnet.ndarray.Convolution`: This API performs a 3D convolution operation on a 5D input tensor. The first three dimensions are treated as spatial dimensions (depth, height, and width), and the last two dimensions are treated as channel dimensions.
* `mxnet.ndarray.Transpose`: This API transposes the dimensions of an array. You can use this API to switch the order of the spatial and channel dimensions in the output of the convolution operation.

Here's an example code snippet that demonstrates how you can use these APIs to perform a 3D transposed convolution operation:
```scss
import mxnet as mx

# Define input tensor with shape (batch_size, depth, height, width, channels)
input_tensor = mx.nd.random.normal(shape=(1, 10, 10, 10, 3))

# Perform a 3D convolution operation on the input tensor
conv_output = mx.nd.Convolution(data=input_tensor, num_filter=64, kernel_size=(3, 3, 3), stride=(2, 2, 2), pad=(1, 1, 1))

# Transpose the dimensions of the convolution output to switch the order of the spatial and channel dimensions
transposed_output = mx.nd.Transpose(conv_output, axes=(0, 4, 1, 2, 3))
```
In this example, we first define an input tensor with shape `(batch_size, depth, height, width, channels)`. We then perform a 3D convolution operation on the input tensor using the `mx.nd.Convolution` API. The output of the convolution operation has shape `(batch_size, num_filter, out_depth, out_height, out_width)`.

Next, we use the `mx.nd.Transpose` API to transpose the dimensions of the convolution output. We switch the order of the spatial and channel dimensions by specifying the axes argument as `(0, 4, 1, 2, 3)`. The resulting tensor has shape `(batch_size, out_depth, out_height, out_width, num_filter)`, which is the desired output shape for a 3D transposed convolution operation.