
MXNet does not have an exact equivalent of TensorFlow's `Conv3D` layer. However, you can use the `mxnet.ndarray.Convolution` class to create a 3D convolutional layer. Here is an example:
```
import mxnet as mx

# Create a 3D convolutional layer with 64 filters and a kernel size of (3, 3, 3)
conv = mx.ndarray.Convolution(num_filters=64, kernel_size=(3, 3, 3))
```
Note that the `kernel_size` argument specifies the size of the convolutional kernel in each dimension. In this example, we are using a 3D kernel with a size of (3, 3, 3), which means that the kernel will have a depth of 3, height of 3, and width of 3.

You can also use the `padding` argument to specify the amount of padding to add to the input data before applying the convolutional layer. For example:
```
# Create a 3D convolutional layer with 64 filters and a kernel size of (3, 3, 3)
# with padding of 1 on all sides
conv = mx.ndarray.Convolution(num_filters=64, kernel_size=(3, 3, 3), padding=1)
```
This will add 1 pixel of padding to the input data in each dimension before applying the convolutional layer.