
MXNet does not have a direct equivalent of `torch.nn.ZeroPad2d`. However, you can achieve similar functionality using the `mxnet.ndarray.pad` function with the `mode='constant'` argument set to 0.

Here's an example:
```python
import mxnet as mx

# Create a random tensor
data = mx.nd.random.normal(shape=(3, 3))

# Pad the tensor with zeros on both sides
padded_data = mx.nd.pad(data, pad_width=1, mode='constant', constant_values=0)
```
In this example, `mx.nd.pad` is used to pad the input tensor `data` with zeros on both sides. The `pad_width` argument specifies the number of pixels to pad on each side, and the `mode` argument specifies the padding mode. In this case, we use `'constant'` mode to pad with a constant value (0).

Note that MXNet's `pad` function is more flexible than PyTorch's `ZeroPad2d`, as it allows you to specify different padding modes and values for each dimension of the input tensor. However, if you only need to pad with zeros on both sides, then `mx.nd.pad` with `'constant'` mode should work well.