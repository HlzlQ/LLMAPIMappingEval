  Sure, here are the top 10 APIs in Java that are similar to the C# API `system.collections.generic.list.contains`:

1. `java.util.List` - This is the most direct equivalent of the C# `List<T>` class. It provides a collection of objects that can be accessed by index and allows for adding, removing, and modifying elements.
2. `java.util.ArrayList` - This is a resizable array implementation of the `List` interface. It provides efficient random access and modification of elements, as well as dynamic resizing as needed.
3. `java.util.LinkedList` - This is a doubly-linked list implementation of the `List` interface. It provides efficient insertion and removal of elements at any position in the list, as well as fast traversal in both directions.
4. `java.util.Vector` - This is a synchronized (thread-safe) version of the `ArrayList` class. It provides all the same methods as `ArrayList`, but with additional overhead for ensuring thread safety.
5. `java.util.Stack` - This is a last-in, first-out (LIFO) stack implementation that extends the `Vector` class. It provides efficient addition and removal of elements at the top of the stack, as well as fast traversal in both directions.
6. `java.util.Queue` - This is a first-in, first-out (FIFO) queue implementation that extends the `List` interface. It provides efficient addition and removal of elements at the front of the queue, as well as fast traversal in both directions.
7. `java.util.PriorityQueue` - This is a priority queue implementation that extends the `Queue` interface. It provides efficient addition and removal of elements based on their priority, as well as fast traversal in both directions.
8. `java.util.HashSet` - This is a hash table-based implementation of the `Set` interface. It provides fast insertion, removal, and testing for containment of elements, as well as efficient iteration over the entire set.
9. `java.util.TreeSet` - This is a balanced tree-based implementation of the `Set` interface. It provides fast insertion, removal, and testing for containment of elements, as well as efficient iteration over the entire set in sorted order.
10. `java.util.LinkedHashSet` - This is a linked hash table-based implementation of the `Set` interface. It provides fast insertion, removal, and testing for containment of elements, as well as efficient iteration over the entire set in insertion order.