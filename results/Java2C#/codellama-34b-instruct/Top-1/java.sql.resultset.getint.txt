C# does not have a direct equivalent to the `java.sql.ResultSet` class or its `getInt()` method. However, C# provides several ways to retrieve data from a database and convert it into an integer value. Here are some possible alternatives:

1. Using ADO.NET: You can use the `SqlDataReader` class in C# to read data from a SQL Server database. The `GetInt32()` method of this class can be used to retrieve an integer value from a column in the result set.
```
using (SqlConnection connection = new SqlConnection("your_connection_string"))
{
    using (SqlCommand command = new SqlCommand("SELECT * FROM your_table", connection))
    {
        connection.Open();
        using (SqlDataReader reader = command.ExecuteReader())
        {
            while (reader.Read())
            {
                int value = reader.GetInt32(0); // 0 is the column index
                Console.WriteLine(value);
            }
        }
    }
}
```
2. Using Entity Framework: You can use the `DbContext` class in C# to interact with a database using Entity Framework. The `Find()` method of this class can be used to retrieve an entity (a row) from the database, and then you can access its properties to get the integer value.
```
using (var context = new YourDbContext())
{
    var entity = context.YourTable.Find(1); // 1 is the primary key of the entity
    int value = entity.YourColumn;
    Console.WriteLine(value);
}
```
3. Using Dapper: You can use the `Query()` method of the `Dapper` class in C# to execute a SQL query and retrieve data from the database. The `GetInt32()` method of this class can be used to retrieve an integer value from a column in the result set.
```
using (var connection = new SqlConnection("your_connection_string"))
{
    var results = connection.Query<int>("SELECT YourColumn FROM YourTable");
    foreach (var result in results)
    {
        int value = result;
        Console.WriteLine(value);
    }
}
```
These are just a few examples of how you can retrieve data from a database and convert it into an integer value in C#. The best approach will depend on your specific requirements and the technology stack you are using.