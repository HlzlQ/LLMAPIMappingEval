C# does not have an exact equivalent to Java's `String.valueOf()` method. However, there are several methods in C# that can be used to convert objects to strings, depending on the type of object being converted. Here are a few examples:

* For primitive types such as `int`, `double`, and `bool`, you can use the `.ToString()` method to convert them to strings. For example: `123.ToString()` will return the string `"123"`.
* For objects, you can use the `.ToString()` method or the `Object.ToString()` method. The difference between these two methods is that `Object.ToString()` will call the object's `ToString()` method if it has one, while `.ToString()` will always return a string representation of the object. For example: `new Object().ToString()` will return the string `"System.Object"`, while `new Object().GetType().ToString()` will return the string `"Object"`.
* For nullable types such as `int?` and `double?`, you can use the `.ToString()` method to convert them to strings. For example: `(123).ToString()` will return the string `"123"` and `(null).ToString()` will return the string `"null"`.

It's worth noting that in C#, there is no equivalent to Java's `String.valueOf(Object)` method, which can be used to convert any object to a string. However, you can use the `.ToString()` method or the `Object.ToString()` method to achieve similar results.